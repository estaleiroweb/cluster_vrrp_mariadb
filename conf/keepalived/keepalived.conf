# VRRP `keepalived`

O Keepalived é um daemon de alta disponibilidade que usa o protocolo VRRP (Virtual Router Redundancy Protocol) e pode também ser integrado com o LVS (Linux Virtual Server) para balanceamento de carga. Sua configuração é dividida em diferentes "contextos" ou blocos, cada um com uma finalidade específica.

O `track_script` é um exemplo de um contexto de monitoramento que atua diretamente sobre a prioridade de uma instância VRRP. Além dele, o Keepalived oferece outros contextos para diversas funcionalidades.

Aqui estão os principais contextos de configuração do Keepalived:

## 1. `global_defs`

Este é o bloco de configuração global. Define parâmetros que afetam o comportamento de todo o Keepalived.

- `router_id`: Um identificador único para o roteador Keepalived.
- `notification_email`: Lista de endereços de e-mail para os quais notificações serão enviadas em caso de mudança de estado.
- `notification_email_from`: Endereço de e-mail do remetente das notificações.
- `smtp_server`: Servidor SMTP para enviar as notificações.
- `vrrp_strict`: Habilita a checagem estrita do VRRP (recomendado).
- `vrrp_iptables`: Para gerenciar regras de iptables relacionadas ao VRRP.
- `enable_script_security`: Habilita ou desabilita a segurança de execução de scripts (bom para evitar scripts maliciosos).

## 2. `vrrp_script`

Este contexto é usado para definir scripts externos que o Keepalived executará periodicamente para verificar a saúde de serviços ou condições do sistema. Eles são referenciados posteriormente por outros blocos.

- `script`: O comando ou caminho para o script a ser executado.
- `interval`: O intervalo de tempo (em segundos) entre as execuções do script.
- `weight`: O valor de prioridade a ser adicionado ou subtraído da instância VRRP se o script for bem-sucedido ou falhar, respectivamente.
- `timeout`: Tempo limite para a execução do script.
- `rise`: Número de sucessos consecutivos necessários para que o script seja considerado "UP".
- `fall`: Número de falhas consecutivas necessárias para que o script seja considerado "DOWN".
- `user`: Usuário e grupo sob o qual o script será executado.

## 3. `vrrp_instance`

Este é o coração da configuração VRRP. Define uma instância VRRP individual, que gerencia um ou mais IPs virtuais.

- `state`: Estado inicial da instância (`MASTER` ou `BACKUP`).
- `interface`: A interface de rede onde o VRRP será executado.
- `virtual_router_id`: Um ID único para esta instância VRRP dentro da rede (deve ser o mesmo em todos os nós do cluster para a mesma VIP).
- `priority`: A prioridade numérica deste servidor dentro da instância VRRP (quanto maior, mais propenso a ser MASTER).
- `advert_int`: Intervalo de tempo (em segundos) para o envio de anúncios VRRP.
- `authentication`: Bloco para configurar a autenticação VRRP.
  - `auth_type`: Tipo de autenticação (`PASS` ou `AH`).
  - `auth_pass`: A senha de autenticação.
- `virtual_ipaddress`: Bloco que lista os IPs virtuais que esta instância VRRP irá gerenciar.
- `unicast_src_ip`: (Para unicast VRRP) O endereço IP da fonte unicast.
- `unicast_peer`: (Para unicast VRRP) Lista de endereços IP dos pares unicast.
- `nopreempt`: Impede que um nó com prioridade mais alta tome o papel de MASTER de volta se ele retornar online (útil para evitar "flapping").
- `notify_*`: Comandos a serem executados em caso de mudança de estado (ex: `notify_master`, `notify_backup`, `notify_fault`).
- `garp_master_delay`: Atraso para enviar GARP (Gratuitous ARP) quando se torna MASTER.
- `track_script`: Referencia um ou mais scripts definidos em `vrrp_script` para ajustar a prioridade com base na saúde dos serviços.
- `track_interface`: Monitora o estado de interfaces de rede. Se uma interface cair, a prioridade da instância pode ser ajustada.
  - `interface_name [weight N]`: O nome da interface a ser monitorada e um `weight` opcional para ajuste de prioridade.
- `track_process`: Permite monitorar processos específicos pelo seu nome.
  - `process_name [weight N] [user username]`: O nome do processo, um `weight` opcional, e um usuário para executar a verificação.
- `track_file`: Monitora o conteúdo de um arquivo.
  - `filepath [weight N]`: O caminho do arquivo e um `weight` opcional.

## 4. `vrrp_sync_group`

Este contexto é usado para agrupar várias `vrrp_instance`s. Se uma instância dentro do grupo mudar de estado para `FAULT`, todas as outras instâncias no mesmo grupo também farão o failover. Isso é útil para garantir que um conjunto de IPs virtuais faça failover em conjunto.

- `group`: Lista os nomes das instâncias VRRP a serem sincronizadas.
- `notify_*`: Comandos a serem executados em caso de mudança de estado do grupo.

## 5. `static_ipaddress` e `static_routes`

Estes contextos são usados para configurar endereços IP estáticos e rotas diretamente no Keepalived, embora seja mais comum e geralmente recomendado gerenciar IPs e rotas através das ferramentas de rede do sistema operacional (ex: `ip addr`, `ip route`). Eles são menos usados para alta disponibilidade e mais para conveniência na configuração se o Keepalived for o único ponto de configuração de rede.

## 6. `virtual_server`

Este contexto é usado quando o Keepalived está atuando como um balanceador de carga LVS. Ele define um serviço virtual (VIP) e os servidores reais que o atenderão.

- `ip_address`: O IP virtual do serviço.
- `port`: A porta do serviço.
- `delay_loop`: Intervalo entre as verificações de saúde dos servidores reais.
- `lb_algo`: Algoritmo de balanceamento de carga (ex: `rr` - round robin, `wlc` - weighted least connection).
- `lb_kind`: Tipo de roteamento LVS (`NAT`, `DR`, `TUN`).
- `persistence_timeout`: Tempo de persistência da sessão.
- `real_server`: Bloco para definir um servidor real.
  - `ip_address`: IP do servidor real.
  - `port`: Porta do serviço no servidor real.
  - `weight`: Peso do servidor para o algoritmo de balanceamento.
  - `TCP_CHECK`, `HTTP_GET`, `SSL_GET`, `MISC_CHECK`: Tipos de checagem de saúde para o servidor real.

Esses são os principais contextos e suas funcionalidades no Keepalived.

O `track_script` é poderoso porque permite uma lógica de monitoramento altamente personalizável para influenciar o comportamento de failover do VRRP.

## Exemplo

```conf
vrrp_script check_proxy {
    script "pgrep -f haproxy"
    interval 2
    weight 50
}
vrrp_script check_webserver {
    script "pgrep -f httpd"
    interval 2
    weight 30
}
vrrp_script check_database {
    script "/usr/local/bin/check_db_conn.sh" # Um script mais complexo para verificar a conexão com o DB
    interval 5
    weight 70
}
vrrp_script check_app_status_file {
    script "test -f /var/run/my_app.status" # Verifica se o arquivo existe
    interval 5                               # Executa a cada 5 segundos
    weight 50                                # Ajusta a prioridade em 50
}
vrrp_script check_critical_flag {
    script "test -f /etc/keepalived/critical_flag.txt" # Verifica se o arquivo crítico existe
    interval 2                                        # Executa a cada 2 segundos
    # 'weight' não está presente, então falha => FAULT
}
vrrp_instance VI_1 {
    state MASTER
    interface enp0s3
    virtual_router_id 50
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1234
    }
    virtual_ipaddress {
        10.0.0.1/24
    }
    notify_master "systemctl restart haproxy"
    notify_backup "systemctl stop haproxy"

    # Para redes distintas/públicas/cloud
    # unicast_src_ip 192.168.1.10 # IP próprio deste servidor (ServerA)
    # unicast_peer {
        # 192.168.1.11         # IP do servidor par (ServerB)
        # 192.168.1.12         # IP do servidor par (ServerC)
    # }

    # nopreempt # 
        # sudo rm /etc/keepalived/force_fault # Para fazer a instância entrar em FAULT, remova o arquivo:
        # sudo touch /etc/keepalived/force_fault # Para permitir que ela volte ao normal (se não houver outro MASTER com prioridade maior), crie o arquivo novamente:
    # notify_fault "/usr/bin/logger -t keepalived-notify 'VRRP instance VI_WEB entered FAULT state!'"
    # track_script {
        # check_proxy
        # check_webserver
        # check_database
    # }
    # track_interface
    # track_process {
        # apache2 weight 20 user root
    # }
    # track_process {
        # httpd weight 30 
    # }
}
```
